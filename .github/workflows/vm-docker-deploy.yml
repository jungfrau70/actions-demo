name: Deploy to VM with Docker

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.actor }}/actions-demo

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ secrets.DOCKERHUB_TOKEN != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

  deploy-aws-ec2:
    name: Deploy to AWS EC2 with Docker
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          port: ${{ secrets.AWS_EC2_PORT || 22 }}
          script: |
            # Docker 이미지 다운로드
            echo "🐳 Pulling Docker image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # 기존 컨테이너 중지 및 제거
            echo "🛑 Stopping existing container..."
            docker stop actions-demo-prod || true
            docker rm actions-demo-prod || true
            
            # 새 컨테이너 실행
            echo "🚀 Starting new container..."
            docker run -d \
              --name actions-demo-prod \
              -p 80:3000 \
              --restart unless-stopped \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # 컨테이너 상태 확인
            echo "🔍 Checking container status..."
            docker ps | grep actions-demo-prod
            
            # 헬스체크
            echo "🏥 Performing health check..."
            sleep 10
            curl -f http://localhost:3000/health || echo "Health check failed"
            
            echo "✅ AWS EC2 deployment completed successfully!"

  deploy-gcp-gce:
    name: Deploy to GCP GCE with Docker
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to GCP GCE
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_GCE_HOST }}
          username: ${{ secrets.GCP_GCE_USER }}
          key: ${{ secrets.GCP_GCE_SSH_KEY }}
          port: ${{ secrets.GCP_GCE_PORT || 22 }}
          script: |
            # Docker 이미지 다운로드
            echo "🐳 Pulling Docker image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # 기존 컨테이너 중지 및 제거
            echo "🛑 Stopping existing container..."
            docker stop actions-demo-prod || true
            docker rm actions-demo-prod || true
            
            # 새 컨테이너 실행
            echo "🚀 Starting new container..."
            docker run -d \
              --name actions-demo-prod \
              -p 80:3000 \
              --restart unless-stopped \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # 컨테이너 상태 확인
            echo "🔍 Checking container status..."
            docker ps | grep actions-demo-prod
            
            # 헬스체크
            echo "🏥 Performing health check..."
            sleep 10
            curl -f http://localhost:3000/health || echo "Health check failed"
            
            echo "✅ GCP GCE deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-aws-ec2, deploy-gcp-gce]
    if: always()
    steps:
      - name: Check deployment status
        id: check-status
        run: |
          if [ "${{ needs.deploy-aws-ec2.result }}" = "success" ] && [ "${{ needs.deploy-gcp-gce.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=🎉 VM Docker deployment completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ VM Docker deployment failed!" >> $GITHUB_OUTPUT
          fi
      
      - name: Notify Slack
        if: steps.check-status.outputs.status == 'success' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 VM Docker Deployment Successful!
            
            📦 Application: actions-demo
            📊 Version: ${{ github.sha }}
            🌍 Environment: production
            🐳 AWS EC2: ✅ Success
            🐳 GCP GCE: ✅ Success
            ⏰ Time: ${{ github.event.head_commit.timestamp }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack (Failure)
        if: steps.check-status.outputs.status == 'failure' && secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ VM Docker Deployment Failed!
            
            📦 Application: actions-demo
            📊 Version: ${{ github.sha }}
            🌍 Environment: production
            🔍 Check logs for details
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
