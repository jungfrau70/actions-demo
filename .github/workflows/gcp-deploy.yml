name: Deploy to GCP Cloud Run

# main 브랜치에 푸시될 때만 실행
on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# 환경 변수 설정
env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.actor }}/actions-demo
  GCP_REGION: asia-northeast1

jobs:
  # Docker 이미지 빌드 및 푸시
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ secrets.DOCKERHUB_TOKEN != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

  # GCP Cloud Run 배포
  deploy-gcp:
    name: Deploy to GCP Cloud Run
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'
      
      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker
      
      - name: Build and push to Google Container Registry
        id: build-gcr
        env:
          GCR_REGISTRY: gcr.io
          GCR_REPOSITORY: ${{ secrets.GCP_PROJECT_ID }}/actions-demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # GCR에 이미지 빌드 및 푸시
          docker build -t $GCR_REGISTRY/$GCR_REPOSITORY:$IMAGE_TAG .
          docker push $GCR_REGISTRY/$GCR_REPOSITORY:$IMAGE_TAG
          echo "image=$GCR_REGISTRY/$GCR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Built and pushed to GCR: $GCR_REGISTRY/$GCR_REPOSITORY:$IMAGE_TAG"
      
      - name: Deploy to Cloud Run
        id: deploy-cloudrun
        run: |
          # Cloud Run에 배포
          SERVICE_URL=$(gcloud run deploy ${{ secrets.GCP_SERVICE_NAME }} \
            --image ${{ steps.build-gcr.outputs.image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --concurrency 80 \
            --format "value(status.url)")
          
          echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to Cloud Run: $SERVICE_URL"
      
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to complete..."
          # Cloud Run 배포 완료 대기
          gcloud run services describe ${{ secrets.GCP_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format "value(status.conditions[0].status)"
          
          echo "Deployment completed successfully!"
      
      - name: Get service information
        run: |
          # 서비스 정보 출력
          gcloud run services describe ${{ secrets.GCP_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format "table(metadata.name,status.url,status.conditions[0].status,spec.template.spec.containers[0].image)"
      
      - name: Health check
        run: |
          echo "Performing health check..."
          SERVICE_URL="${{ steps.deploy-cloudrun.outputs.service-url }}"
          
          # 헬스체크 실행
          for i in {1..5}; do
            if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # 최종 헬스체크
          if ! curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
            echo "Health check failed after 5 attempts"
            exit 1
          fi
      
      - name: Set up traffic allocation
        run: |
          # 트래픽을 새 버전으로 100% 할당
          gcloud run services update-traffic ${{ secrets.GCP_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --to-latest
          
          echo "Traffic allocated to latest revision"
      
      - name: Clean up old revisions
        run: |
          # 오래된 리비전 정리 (최근 5개만 유지)
          gcloud run revisions list \
            --service ${{ secrets.GCP_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format "value(metadata.name)" \
            --sort-by="~metadata.creationTimestamp" \
            --limit=100 | tail -n +6 | xargs -r -I {} gcloud run revisions delete {} \
            --region ${{ env.GCP_REGION }} \
            --quiet
          
          echo "Cleaned up old revisions"
      
      - name: Check Slack webhook
        id: check-slack
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "slack_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "slack_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: |
            [
              {
                "title": "Service URL",
                "value": "${{ steps.deploy-cloudrun.outputs.service-url }}",
                "short": false
              },
              {
                "title": "Region",
                "value": "${{ env.GCP_REGION }}",
                "short": true
              },
              {
                "title": "Image",
                "value": "${{ steps.build-gcr.outputs.image }}",
                "short": false
              }
            ]
        if: always() && steps.check-slack.outputs.slack_enabled == 'true'
        continue-on-error: true
