name: Deploy to Production

# main 브랜치에 푸시될 때만 실행
on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# 환경 변수 설정
env:
  # GitHub Container Registry (권한 필요)
  # REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository }}
  
  # Docker Hub (권한 문제 없음)
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.actor }}/actions-demo

# 환경별 배포 설정
jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build application
        run: npm run build
      
      # Docker 이미지 빌드 및 푸시
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ secrets.GITHUB_TOKEN != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true
      
      # Staging 환경 배포
      - name: Deploy to staging
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to staging environment..."
          echo "Application version: ${{ github.sha }}"
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # 실제 배포 시에는 다음과 같은 명령어를 사용:
          # docker run -d -p 3000:3000 --name actions-demo-staging ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # 또는 Kubernetes, Docker Compose, 클라우드 서비스 사용
      
      # Production 환경 배포
      - name: Deploy to production
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Deploying to production environment..."
          echo "Release version: ${{ github.ref_name }}"
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          
          # 실제 배포 시에는 다음과 같은 명령어를 사용:
          # docker run -d -p 80:3000 --name actions-demo-prod ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          # 또는 Kubernetes, Docker Compose, 클라우드 서비스 사용
      
      - name: Check Slack webhook
        id: check-slack
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "slack_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "slack_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() && steps.check-slack.outputs.slack_enabled == 'true'
        continue-on-error: true
